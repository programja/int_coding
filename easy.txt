Answers in Java
Problem definitions above solution, will notify when sub- or optimal per performance/space.
Per how to approach:

Start with easy problems (maybe one month, 20 - 30 problems, top-100 liked/interview questions);
Per interviews: Stick to medium
Best ones - Top 100 liked problems;
Start with easy -> hard DS (arrays, stack, queue -> heaps);
Dont spend in one problem hours and hours, look at the solution

Create a repo for the solutions: https://github.com/programja/int_coding

Will do 50 of 100 Liked questions
Will do 50 of 100 Interview questions

LIKED:

1. Problem definition: Two Sum 10/18
Given: Array of integers and an integer target, return indices of the two numbers such that they add up to target.
One solution, cannot use the same element twice.

Solution:
A) Could be quicker.

class Solution {
    public int[] twoSum(int[] nums, int target) {

        int nLength = nums.length;
        int[] ansArray = new int[2];

        for (int i=0; i < nLength; i++) {
            for (int j = i+1; j < nLength; j++) {
                if (nums[i] + nums[j] == target) {
                    ansArray[0] = i;
                    ansArray[1] = j;
                }
            }
        }

        return ansArray;
    }
}

*** COME BACK TO 2. Problem definition: Merge Two Sorted Lists 10/20
Merge two sorted lists and return it as a sorted list.
The list should be made by splicing together the nodes of the first two lists.

Data Structure: ListNode [Java LinkedLists]

Problem I am having is understanding how to deal with ListNodes.
Very little documentation that works.

Solution: DOES NOT WORK YET

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {

        ListNode l3 = new ListNode();

        if(l1 == null || l1.next == null || l2 == null || l2.next == null) {
            return null;
        }

        if (l1 != null && l2 == null) {
            return ((int) l1.val);
        } else if (l1 == null && l2 != null) {
            return ((int) l2.val);
        }

        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                l3.val = l1.val;
                l3 = l3.next;
                l1 = l1.next;
            } else {
                l3.val = l2.val;
                l3 = l3.next;
                l2 = l2.next;
            }
        }
        return l3;
    }
}



3. Problem definition: Merge Two Binary Trees
You are given two binary trees root1 and root2.

Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.

Solution:
A)

*** HOW TO TRAVERSE A TREENODE OR SIMILAR BINARY TREE STRUTCURE ***

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {

        if (root1 == null) { return root2; };
        if (root2 == null) { return root1; };

        root1.val += root2.val;
        root1.left = mergeTrees(root1.left, root2.left);
        root1.right = mergeTrees(root1.right, root2.right);

        return root1;
    }
}

This checks the roots first. If both are not null, it simply adds root2 to root1. If one is null, it is an empty tree and returns the other.
It then recurses on either side of the BTREE using the 'root1.left' as the TreeNode root (all sub-trees are also trees) and root2.left as the new TreeNode root.
i.e. the if (root1 == null) { return root2; }; works to side-step any nulls as we travel down the TreeNodes.
KEEP IN MIND: While root1.left returns ALL of the values of the LEFT subtree (LEFT TreeNodes) - but can only pull the VALUE (val) from the current working root.

4. Problem definition:

Solution:

5. Problem definition:

Solution:

6. Problem definition:

Solution:
